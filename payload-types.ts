/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site".
 */
export interface Site {
  id: string;
  primaryAuthor?: string | User;
  copyright?: string;
  metaTitle?: string;
  metaDescription?: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string;
  avatar?: string | Media;
  portrait?: string | Media;
  socials: {
    twitter?: string;
    github?: string;
    linkedin?: string;
    twitch?: string;
    youtube?: string;
  };
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes: {
    thumbnail: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    portrait: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    hero: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name?: string;
  slug?: string;
  description?: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title?: string;
  summary?: string;
  slug?: string;
  author?: string | User;
  publishedDate?: string;
  category?: string | Category;
  tags?: (string | Tag)[];
  layout: (
    | {
        quoteHeader?: string;
        quoteText: string;
        referenceName?: string;
        referenceURL?: string;
        id?: string;
        blockName?: string;
        blockType: 'quote';
      }
    | {
        content: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        question?: string;
        action: string;
        content?: string;
        actionLink?: string;
        actionText?: string;
        infoLink?: string;
        infoText?: string;
        media?: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'cta';
      }
    | {
        title?: string;
        content?: string;
        link: string;
        media?: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'bookmark';
      }
    | {
        media: string | Media;
        size?: 'normal' | 'wide' | 'fullscreen';
        caption?: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'media';
      }
    | {
        fileName?: string;
        language?:
          | 'go'
          | 'rust'
          | 'js'
          | 'bash'
          | 'python'
          | 'html'
          | 'css'
          | 'md'
          | 'json'
          | 'yaml'
          | 'graphql'
          | 'docker'
          | 'ts'
          | 'nix';
        highlight?: string;
        code: string;
        id?: string;
        blockName?: string;
        blockType: 'code';
      }
    | {
        title?: string;
        admonitionText: string;
        icon?: 'info' | 'warning' | 'danger' | 'note' | 'hint' | 'idea';
        id?: string;
        blockName?: string;
        blockType: 'admonition';
      }
    | {
        category?: string;
        title: string;
        body?: string;
        media?: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'header';
      }
    | {
        gallery: {
          image: string | Media;
          caption?: string;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'gallery';
      }
  )[];
  status?: 'draft' | 'published';
  meta: {
    title?: string;
    description?: string;
    image?: string | Media;
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name?: string;
  slug?: string;
  description?: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title?: string;
  summary?: string;
  slug?: string;
  author?: string | User;
  layout: (
    | {
        quoteHeader?: string;
        quoteText: string;
        referenceName?: string;
        referenceURL?: string;
        id?: string;
        blockName?: string;
        blockType: 'quote';
      }
    | {
        content: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        question?: string;
        action: string;
        content?: string;
        actionLink?: string;
        actionText?: string;
        infoLink?: string;
        infoText?: string;
        media?: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'cta';
      }
    | {
        title?: string;
        content?: string;
        link: string;
        media?: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'bookmark';
      }
    | {
        media: string | Media;
        size?: 'normal' | 'wide' | 'fullscreen';
        caption?: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'media';
      }
    | {
        fileName?: string;
        language?:
          | 'go'
          | 'rust'
          | 'js'
          | 'bash'
          | 'python'
          | 'html'
          | 'css'
          | 'md'
          | 'json'
          | 'yaml'
          | 'graphql'
          | 'docker'
          | 'ts'
          | 'nix';
        highlight?: string;
        code: string;
        id?: string;
        blockName?: string;
        blockType: 'code';
      }
    | {
        category?: string;
        title: string;
        body?: string;
        media?: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'header';
      }
    | {
        title?: string;
        admonitionText: string;
        icon?: 'info' | 'warning' | 'danger' | 'note' | 'hint' | 'idea';
        id?: string;
        blockName?: string;
        blockType: 'admonition';
      }
    | {
        gallery: {
          image: string | Media;
          caption?: string;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'gallery';
      }
  )[];
  meta: {
    title?: string;
    description?: string;
    image?: string | Media;
  };
  createdAt: string;
  updatedAt: string;
}
